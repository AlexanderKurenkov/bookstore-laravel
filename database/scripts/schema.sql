-- mysql -u <username> -p < schema.sql
DROP DATABASE IF EXISTS bookstore;
CREATE DATABASE bookstore;
USE bookstore;
-- Create the role table
DROP TABLE IF EXISTS roles;
CREATE TABLE roles (
	role_id INT AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255)
);
-- Create the users table
-- compatible with 'users' table generated by Laravel Breeze
DROP TABLE IF EXISTS users;
CREATE TABLE users (
	id BIGINT UNIQUE NOT NULL AUTO_INCREMENT PRIMARY KEY,
	email VARCHAR(255) UNIQUE NOT NULL,
	name VARCHAR(255) NOT NULL,
	email_verified_at TIMESTAMP NULL DEFAULT NULL,
	remember_token VARCHAR(100) DEFAULT NULL,
	created_at TIMESTAMP NULL DEFAULT NULL,
	updated_at TIMESTAMP NULL DEFAULT NULL,
	enabled BIT(1) NOT NULL DEFAULT FALSE,
	first_name VARCHAR(255),
	last_name VARCHAR(255),
	password VARCHAR(255),
	phone VARCHAR(255),
	UNIQUE KEY UK_user_email (email)
);
-- Create the payment table
DROP TABLE IF EXISTS payments;
CREATE TABLE payments (
	id BIGINT NOT NULL AUTO_INCREMENT,
	card_number VARCHAR(255),
	cvc INT NOT NULL,
	default_payment BIT(1) NOT NULL,
	expiry_month INT NOT NULL,
	expiry_year INT NOT NULL,
	holder_name VARCHAR(255),
	type VARCHAR(255),
	order_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the shipping_address table
DROP TABLE IF EXISTS shipping_addresses;
CREATE TABLE shipping_addresses (
	id BIGINT NOT NULL AUTO_INCREMENT,
	shipping_address_city VARCHAR(255),
	shipping_address_country VARCHAR(255),
	shipping_address_name VARCHAR(255),
	shipping_address_state VARCHAR(255),
	shipping_address_street1 VARCHAR(255),
	shipping_address_street2 VARCHAR(255),
	shipping_address_zipcode VARCHAR(255),
	order_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the user_order table
DROP TABLE IF EXISTS user_orders;
CREATE TABLE user_orders (
	id BIGINT NOT NULL AUTO_INCREMENT,
	order_date DATETIME,
	order_status VARCHAR(255),
	order_total DECIMAL(19, 2),
	shipping_date DATETIME,
	shipping_method VARCHAR(255),
	billing_address_id BIGINT,
	payment_id BIGINT,
	shipping_address_id BIGINT,
	user_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the billing_address table
DROP TABLE IF EXISTS billing_addresses;
CREATE TABLE billing_addresses (
	id BIGINT NOT NULL AUTO_INCREMENT,
	billing_address_city VARCHAR(255),
	billing_address_country VARCHAR(255),
	billing_address_name VARCHAR(255),
	billing_address_state VARCHAR(255),
	billing_address_street1 VARCHAR(255),
	billing_address_street2 VARCHAR(255),
	billing_address_zipcode VARCHAR(255),
	order_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the user_payment table
DROP TABLE IF EXISTS user_payments;
CREATE TABLE user_payments (
	id BIGINT NOT NULL AUTO_INCREMENT,
	card_name VARCHAR(255),
	card_number VARCHAR(255),
	cvc INT NOT NULL,
	default_payment BIT(1) NOT NULL,
	expiry_month INT NOT NULL,
	expiry_year INT NOT NULL,
	holder_name VARCHAR(255),
	type VARCHAR(255),
	user_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the user_shipping table
DROP TABLE IF EXISTS user_shippings;
CREATE TABLE user_shippings (
	id BIGINT NOT NULL AUTO_INCREMENT,
	user_shipping_city VARCHAR(255),
	user_shipping_country VARCHAR(255),
	user_shipping_default BIT(1) NOT NULL,
	user_shipping_name VARCHAR(255),
	user_shipping_state VARCHAR(255),
	user_shipping_street1 VARCHAR(255),
	user_shipping_street2 VARCHAR(255),
	user_shipping_zipcode VARCHAR(255),
	user_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the cart_item table
DROP TABLE IF EXISTS cart_items;
CREATE TABLE cart_items (
	id BIGINT NOT NULL AUTO_INCREMENT,
	qty INT NOT NULL,
	subtotal DECIMAL(19, 2),
	book_id BIGINT,
	order_id BIGINT,
	shopping_cart_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the book table
DROP TABLE IF EXISTS books;
CREATE TABLE books (
	id BIGINT NOT NULL AUTO_INCREMENT,
	title VARCHAR(255),
	author VARCHAR(255),
	publisher VARCHAR(255),
	year INT NOT NULL,
	price DECIMAL(19, 2) NOT NULL,
	PRIMARY KEY (id)
);
-- Create the book_to_cart_item table
DROP TABLE IF EXISTS book_to_cart_items;
CREATE TABLE book_to_cart_items (
	id BIGINT NOT NULL AUTO_INCREMENT,
	book_id BIGINT,
	cart_item_id BIGINT,
	PRIMARY KEY (id)
);
-- Create the shopping_cart table
DROP TABLE IF EXISTS shopping_carts;
CREATE TABLE shopping_carts (
	id BIGINT NOT NULL AUTO_INCREMENT,
	user_id BIGINT,
	session_id VARCHAR(255),
	PRIMARY KEY (id)
);
-- Create the user_billing table
DROP TABLE IF EXISTS user_billings;
CREATE TABLE user_billings (
	id BIGINT UNIQUE NOT NULL AUTO_INCREMENT PRIMARY KEY,
	user_billing_name VARCHAR(255),
	user_billing_street1 VARCHAR(255),
	user_billing_street2 VARCHAR(255),
	user_billing_city VARCHAR(255),
	user_billing_state VARCHAR(255),
	user_billing_zipcode VARCHAR(255),
	user_billing_country VARCHAR(255),
	user_payment_id BIGINT
);
-- Create the password_reset_token table
DROP TABLE IF EXISTS password_reset_tokens;
CREATE TABLE password_reset_tokens (
	email VARCHAR(255) NOT NULL PRIMARY KEY,
	token VARCHAR(255) NOT NULL,
	created_at TIMESTAMP NULL DEFAULT NULL,
	user_id BIGINT NOT NULL
);
-- Create the user_role table
DROP TABLE IF EXISTS user_roles;
CREATE TABLE user_roles (
	user_id BIGINT NOT NULL,
	role_id INT NOT NULL,
	PRIMARY KEY (user_id, role_id)
);
-- Alter table to add foreign keys
ALTER TABLE payments
ADD FOREIGN KEY (order_id) REFERENCES user_orders (id);
ALTER TABLE shipping_addresses
ADD FOREIGN KEY (order_id) REFERENCES user_orders (id);
ALTER TABLE user_orders
ADD FOREIGN KEY (billing_address_id) REFERENCES billing_addresses (id);
ALTER TABLE user_orders
ADD FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE user_orders
ADD FOREIGN KEY (shipping_address_id) REFERENCES shipping_addresses (id);
ALTER TABLE user_orders
ADD FOREIGN KEY (payment_id) REFERENCES payments (id);
ALTER TABLE billing_addresses
ADD FOREIGN KEY (order_id) REFERENCES user_orders (id);
ALTER TABLE user_payments
ADD FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE user_shippings
ADD FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE cart_items
ADD FOREIGN KEY (book_id) REFERENCES books (id);
ALTER TABLE cart_items
ADD FOREIGN KEY (shopping_cart_id) REFERENCES shopping_carts (id);
ALTER TABLE cart_items
ADD FOREIGN KEY (order_id) REFERENCES user_orders (id);
ALTER TABLE book_to_cart_items
ADD FOREIGN KEY (book_id) REFERENCES books (id);
ALTER TABLE book_to_cart_items
ADD FOREIGN KEY (cart_item_id) REFERENCES cart_items (id);
ALTER TABLE shopping_carts
ADD FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE user_billings
ADD FOREIGN KEY (user_payment_id) REFERENCES user_payments (id);
ALTER TABLE password_reset_tokens
ADD FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE user_roles
ADD FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE user_roles
ADD FOREIGN KEY (role_id) REFERENCES roles (role_id);
-- ChatGPT
-- user
-- role
-- user_role (depends on users and role)
-- user_payment (depends on users)
-- payment (depends on user_order)
-- user_order (depends on user, billing_address, payment, shipping_address)
-- billing_address (depends on user_order)
-- shipping_address (depends on user_order)
-- shopping_cart (depends on users)
-- cart_item (depends on shopping_cart and book)
-- book
-- book_to_cart_item (depends on book and cart_item)
-- password_reset_token (depends on users)
-- user_billing (depends on user_payment)
-- user_shipping (depends on users)